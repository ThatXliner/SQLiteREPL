#!/usr/bin/env python
# -*- coding: utf-8 -*-

from prompt_toolkit.document import Document
from prompt_toolkit.completion import Completion
from typing import List
import os
from glob import iglob
import itertools

sql = {
    'ABORT',
    'ABS(',
    'ACTION',
    'ADD',
    'AFTER',
    'ALL',
    'ALTER TABLE',
    'ALTER',
    'AND',
    'ASC',
    'ATTACH DATABASE',
    'ATTACH',
    'AUTOINCREMENT',
    'BEFORE',
    'BEGIN TRANSACTION',
    'BEGIN',
    'BETWEEN',
    'BY',
    'CASCADE',
    'CASE',
    'CAST',
    'CHANGES()',
    'CHAR(',
    'CHECK',
    'COALESCE(',
    'COLLATE',
    'COLUMN',
    'COMMIT TRANSACTION',
    'COMMIT',
    'CONFLICT',
    'CONSTRAINT',
    'CREATE INDEX',
    'CREATE TABLE',
    'CREATE TRIGGER',
    'CREATE VIEW',
    'CREATE VIRTUAL TABLE',
    'CREATE',
    'CROSS',
    'CURRENT_DATE',
    'CURRENT_TIME',
    'CURRENT_TIMESTAMP',
    'DATABASE',
    'DEFAULT',
    'DEFERRABLE',
    'DEFERRED',
    'DELETE',
    'DESC',
    'DETACH',
    'DISTINCT',
    'DROP INDEX',
    'DROP TABLE',
    'DROP TRIGGER',
    'DROP VIEW',
    'DROP',
    'EACH',
    'ELSE',
    'END',
    'ESCAPE',
    'EXCEPT',
    'EXCLUSIVE',
    'EXISTS',
    'EXPLAIN',
    'FAIL',
    'FLOAT',
    'FOR',
    'FOREIGN',
    'FROM',
    'FULL',
    'GLOB(',
    'GROUP',
    'HAVING',
    'HEX(',
    'IF',
    'IFNULL(',
    'IGNORE',
    'IMMEDIATE',
    'IN',
    'INDEX',
    'INDEXED BY',
    'INDEXED',
    'INITIALLY',
    'INNER',
    'INSERT INTO',
    'INSERT',
    'INSTEAD',
    'INSTR(',
    'INTERSECT',
    'INTO',
    'IS',
    'ISNULL',
    'JOIN',
    'KEY',
    'LAST_INSERT_ROWID()',
    'LEFT',
    'LENGTH(',
    'LIKE',
    'LIKELIHOOD(',
    'LIKELY(',
    'LIMIT',
    'LOWER(',
    'MATCH',
    'MAX(',
    'MIN(',
    'NATURAL',
    'NO',
    'NOT',
    'NOTNULL',
    'NULL',
    'NULLIF(',
    'OF',
    'OFFSET',
    'ON CONFLICT',
    'ON',
    'OR',
    'ORDER',
    'OUTER',
    'PLAN',
    'PRAGMA',
    'PRIMARY',
    'PRINTF(',
    'QUERY',
    'QUOTE(',
    'RAISE',
    'RANDOM()',
    'RANDOMBLOB(',
    'RECURSIVE',
    'REFERENCES',
    'REGEXP',
    'REINDEX',
    'RELEASE SAVEPOINT',
    'RELEASE',
    'RENAME',
    'REPLACE',
    'REPLACE(',
    'RESTRICT',
    'RIGHT',
    'ROLLBACK',
    'ROW',
    'SAVEPOINT',
    'SELECT',
    'SET',
    'SOUNDEX(',
    'SQLITE_COMPILEOPTION_GET(',
    'SQLITE_COMPILEOPTION_USED(',
    'SQLITE_SOURCE_ID()',
    'SQLITE_VERSION()',
    'TABLE',
    'TEMP',
    'TEMPORARY',
    'TEXT',
    'THEN',
    'TO',
    'TOTAL_CHANGES()',
    'TRANSACTION',
    'TRIGGER',
    'TYPEOF(',
    'UNICODE(',
    'UNION',
    'UNIQUE',
    'UNLIKELY(',
    'UPDATE',
    'UPPER(',
    'USING',
    'VACUUM',
    'VALUES',
    'VIEW',
    'VIRTUAL',
    'WHEN',
    'WHERE',
    'WITH',
    'WITHOUT',
    'ZEROBLOB('}


def dir_completions(document: Document) -> List[Document]:
    nodes = itertools.chain(iglob('./*'), iglob('*'))
    dirs = filter(os.path.isdir, nodes)
    completions = [Completion(i, start_position=document.find_boundaries_of_current_word(WORD=True)[0], display_meta="dir") for i in dirs]
    return completions


def file_completions(document: Document) -> List[Completion]:
    nodes = itertools.chain(iglob('./*'), iglob('*'))
    files = filter(os.path.isfile, nodes)
    completions = [Completion(i, start_position=document.find_boundaries_of_current_word(WORD=True)[0], display_meta="file") for i in files]
    return completions


def sql_completions(document: Document) -> List[Completion]:
    return [Completion(i, start_position=document.find_boundaries_of_current_word(WORD=True)[0], display_meta="SQL") for i in sql]
